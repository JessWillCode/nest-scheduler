generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
CONFIRMED
CANCELED
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  passwordHash String
  role         Role
  firstName    String
  lastName     String
  timeZone     String         @default("America/New_York")
  availabilities Availability[]
  bookingsAsStudent Booking[] @relation("StudentBookings")
  bookingsAsInstructor Booking[] @relation("InstructorBookings")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Availability {
  id           String   @id @default(cuid())
  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id], map: "avail_inst_fk")
  startUtc     DateTime
  endUtc       DateTime
  slotMinutes  Int      @default(30)
  createdAt    DateTime @default(now())

  @@index([instructorId, startUtc, endUtc], map: "avail_inst_time_idx")
}

model Booking {
  id           String        @id @default(cuid())
  instructorId String
  instructor   User          @relation("InstructorBookings", fields: [instructorId], references: [id], map: "book_inst_fk")
  studentId    String
  student      User          @relation("StudentBookings", fields: [studentId], references: [id], map: "book_stud_fk")
  startUtc     DateTime
  endUtc       DateTime
  status       BookingStatus @default(CONFIRMED)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([instructorId, startUtc, endUtc], map: "book_inst_time_idx")
  @@index([studentId, startUtc, endUtc], map: "book_stud_time_idx")
  @@unique([instructorId, startUtc, endUtc], map: "book_inst_slot_uniq")
}